import Box from '@mui/material/Box'
import ListColumn from './ListColumns/ListColumn'
import { mapOrder } from '~/utils/sorts'
import { useEffect, useState } from 'react'
import { arrayMove } from '@dnd-kit/sortable'
import {
  DndContext,
  DragOverlay,
  MouseSensor,
  TouchSensor,
  useSensor,
  useSensors,
  defaultDropAnimationSideEffects,
  closestCorners
} from '@dnd-kit/core'
import Column from './ListColumns/Column/Column'
import Card from './ListColumns/Column/ListCards/Card/Card'
import { cloneDeep, set } from 'lodash'

const ACTIVE_DRAG_ITEM_TYPE = {
  COLUMN: 'ACTIVE_DRAG_ITEM_TYPE_COLUMN',
  CARD: 'ACTIVE_DRAG_ITEM_TYPE_CARD'
}

function BoardContent({ board }) {
  //Animation khi káº¿t thÃºc hÃ nh Ä‘á»™ng drop
  const dropAnimation = {
    sideEffects: defaultDropAnimationSideEffects({
      styles: {
        active: {
          opacity: '0.5'
        }
      }
    }),
    duration: 250
  }

  //Tá»‘i Æ°u cÃ¡c loáº¡i cháº¡m trÃªn pc vÃ  mobile
  const sensors = useSensors(
    useSensor(MouseSensor, {
      activationConstraint: {
        distance: 10
      }
    }),
    useSensor(TouchSensor, {
      activationConstraint: {
        delay: 250,
        tolerance: 500
      }
    })
  )

  const [orderedColumns, setOrderedColumns] = useState([])
  const [activeDragItemId, setActiveDragItemId] = useState(null)
  const [activeDragItemType, setActiveDragItemType] = useState(null)
  const [activeDragItemData, setActiveDragItemData] = useState(null)
  const [oldActiveColumn, setOldActiveColumn] = useState(null)

  useEffect(() => {
    setOrderedColumns(mapOrder(board?.columns, board?.columnOrderIds, '_id'))
  }, [board])

  //TÃ¬m column chá»©a cardId
  const findColumnByCardId = (cardId) => {
    return orderedColumns.find((column) =>
      column.cards.map((card) => card._id)?.includes(cardId)
    )
  }

  //Trigger khi báº¯t Ä‘áº§u drag
  const handleDragStart = (event) => {
    setActiveDragItemType(
      event?.active?.data?.current?.columnId
        ? ACTIVE_DRAG_ITEM_TYPE.CARD
        : ACTIVE_DRAG_ITEM_TYPE.COLUMN
    )
    setActiveDragItemId(event?.active?.id)
    setActiveDragItemData(event?.active?.data?.current)

    //Náº¿u kÃ©o card thÃ¬ má»›i set láº¡i columnId cÅ©
    if (event?.active?.data?.current?.columnId) {
      setOldActiveColumn(findColumnByCardId(event?.active?.id))
    }
  }

  //Trigger trong quÃ¡ trÃ¬nh kÃ©o. Event chá»‰ dÃ¹ng Ä‘á»ƒ kÃ©o card
  const handleDragOver = (event) => {
    if (activeDragItemType === ACTIVE_DRAG_ITEM_TYPE.COLUMN) return
    const { active, over } = event
    if (!over || !active) return
    //Card Ä‘ang Ä‘Æ°á»£c kÃ©o
    const {
      id: activeCardId,
      data: { current: activeCardData }
    } = active
    //Card Ä‘ang tÆ°Æ¡ng tÃ¡c
    const { id: overCardId, data: overCardData } = over
    // TÃ¬m 2 cÃ¡i column theo card Ä‘ang Ä‘Æ°á»£c kÃ©o vÃ  card Ä‘ang tÆ°Æ¡ng tÃ¡c
    const activeColumn = findColumnByCardId(activeCardId)
    const overColumn = findColumnByCardId(overCardId)

    //Náº¿u khÃ´ng tháº¥y card Ä‘ang Ä‘Æ°á»£c kÃ©o hoáº·c card Ä‘ang tÆ°Æ¡ng tÃ¡c thÃ¬ khÃ´ng lÃ m gÃ¬
    if (!activeColumn || !overColumn) return

    //Kiá»ƒm tra náº¿u 2 column khÃ¡c nhau thÃ¬ xá»­ lÃ½ náº¿u khÃ´ng thÃ¬ khÃ´ng lÃ m gÃ¬
    if (activeColumn._id !== overColumn._id) {
      setOrderedColumns((prevColumns) => {
        //TÃ¬m vá»‹ trÃ­ cá»§a overCard trong column Ä‘Ã­ch (NÆ¡i card sáº¯p Ä‘Æ°á»£c tháº£)
        const overCardIndex = overColumn?.cards?.findIndex(
          (card) => card._id === overCardId
        )
        //Logic tÃ­nh toÃ¡n vá»‹ trÃ­ index má»›i (trÃªn hoáº·c dÆ°á»›i overCard)
        let newCardIndex
        const isBelowOverItem =
        active.rect.current.translated &&
          active.rect.current.translated.top > over.rect.top + over.rect.height

        const modifier = isBelowOverItem ? 1 : 0

        newCardIndex = overCardIndex >= 0 ? overCardIndex + modifier : overColumn?.cards?.slength + 1

        const nextColumns = cloneDeep(prevColumns)
        const nextActiveColumn = nextColumns.find((column) => column._id === activeColumn._id)
        const nextOverColumn = nextColumns.find((column) => column._id === overColumn._id)

        if (nextActiveColumn) {
          //XoÃ¡ card á»Ÿ column Ä‘ang kÃ©o
          nextActiveColumn.cards = nextActiveColumn.cards.filter((card) => card._id !== activeCardId)

          //Cáº­p nháº­p máº£ng OrderIds
          nextActiveColumn.columnOrderIds = nextActiveColumn.cards.map((card) => card._id)
        }

        if (nextOverColumn) {
          //Kiá»ƒm tra card Ä‘ang kÃ©o cÃ³ tá»“n táº¡i trong overColumn hay khÃ´ng. Náº¿u cÃ³ thÃ¬ cáº§n xoÃ¡ nÃ³ trÆ°á»›c
          nextOverColumn.cards = nextOverColumn.cards.filter((card) => card._id !== activeCardId)
          //ThÃªm card Ä‘ang kÃ©o vÃ o column Ä‘Ã­ch theo vá»‹ trÃ­ má»›i
          nextOverColumn.cards = nextOverColumn.cards.toSpliced(newCardIndex, 0, activeCardData)
          //Cáº­p nháº­p máº£ng OrderIds
          nextOverColumn.columnOrderIds = nextOverColumn.cards.map((card) => card._id)
        }
        return nextColumns
      })
    }
  }

  //Trigger khi drop
  const handleDragEnd = (event) => {
    const { active, over } = event

    if (!over || !active) return

    //KÃ©o tháº£ card
    if (activeDragItemType === ACTIVE_DRAG_ITEM_TYPE.CARD) {
      const {
        id: activeCardId,
        data: { current: activeCardData }
      } = active
      //Card Ä‘ang tÆ°Æ¡ng tÃ¡c
      const { id: overCardId, data: overCardData } = over
      // TÃ¬m 2 cÃ¡i column theo card Ä‘ang Ä‘Æ°á»£c kÃ©o vÃ  card Ä‘ang tÆ°Æ¡ng tÃ¡c
      const overColumn = findColumnByCardId(overCardId)
      //Náº¿u khÃ´ng tháº¥y card Ä‘ang Ä‘Æ°á»£c kÃ©o hoáº·c card Ä‘ang tÆ°Æ¡ng tÃ¡c thÃ¬ khÃ´ng lÃ m gÃ¬
      if (!oldActiveColumn || !overColumn) return

      if (oldActiveColumn._id !== overColumn._id) {
        //Xá»­ lÃ½ kÃ©o tháº£ card trong cÃ¡c column khÃ¡c nhau
      } else {
        //Xá»­ lÃ½ kÃ©o tháº£ card trong cÃ¹ng column
        //Láº¥y index cÅ©
        const sourceCardIndex = oldActiveColumn?.cards?.findIndex((c) => c._id === activeCardId)
        // console.log("ðŸš€ ~ handleDragEnd ~ sourceCardIndex:", sourceCardIndex)
        //Láº¥y index má»›i
        const targetCardIndex = overColumn?.cards?.findIndex((c) => c._id === overCardId)
        // console.log("ðŸš€ ~ handleDragEnd ~ targetCardIndex:", targetCardIndex)
        const dndOrderedCards = arrayMove(oldActiveColumn?.cards, sourceCardIndex, targetCardIndex)
        console.log("ðŸš€ ~ handleDragEnd ~ dndOrderedCards:", dndOrderedCards)
        
        setOrderedColumns((prevColumn) => {
          const nextColumn = cloneDeep(prevColumn)

          //TÃ¬m column Ä‘ang tháº£
          const targetColumn = nextColumn.find((column) => column._id === overColumn._id)
          console.log("ðŸš€ ~ setOrderedColumns ~ targetColumn:", targetColumn)
          targetColumn.cardOrderIds = dndOrderedCards.map((card) => card._id)
          targetColumn.cards = dndOrderedCards
          return nextColumn
        })
      }
    }

    //KÃ©o tháº£ column
    if (activeDragItemType === ACTIVE_DRAG_ITEM_TYPE.COLUMN && active.id !== over.id) {
      //Láº¥y index tá»« column kÃ©o
      const sourceColumnIndex = orderedColumns.findIndex((c) => c._id === active.id)
      //Láº¥y index tá»« column Ä‘Ã­ch
      const targetColumnIndex = orderedColumns.findIndex((c) => c._id === over.id)
      // const dndOrderedColumnsIds = orderedColumns.map((c) => c._id)
      //Cáº­p nháº­t state dá»¯ liá»‡u
      setOrderedColumns(arrayMove(orderedColumns, sourceColumnIndex, targetColumnIndex))
    }
    setActiveDragItemId(null)
    setActiveDragItemType(null)
    setActiveDragItemData(null)
    setOldActiveColumn(null)
  }
  return (
    <DndContext
      onDragStart={handleDragStart}
      onDragOver={handleDragOver}
      onDragEnd={handleDragEnd}
      sensors={sensors}
      //Fix card cÃ³ img thÃ¬ khÃ´ng thá»ƒ kÃ©o qua column khÃ¡c
      collisionDetection={closestCorners}
    >
      <Box
        sx={{
          backgroundColor: (theme) =>
            theme.palette.mode === 'dark' ? '#34495e' : '#1976d2',
          width: '100%',
          height: (theme) => theme.trello.boardContentHeight,
          p: '10px 0'
        }}
      >
        <ListColumn columns={orderedColumns} />
        <DragOverlay dropAnimation={dropAnimation}>
          {(!activeDragItemType || !activeDragItemId) && null}
          {(activeDragItemId &&
            activeDragItemType === ACTIVE_DRAG_ITEM_TYPE.COLUMN) && (
            <Column column={activeDragItemData} />
          )}
          {(activeDragItemId &&
            activeDragItemType === ACTIVE_DRAG_ITEM_TYPE.CARD) && (
            <Card card={activeDragItemData} />
          )}
        </DragOverlay>
      </Box>
    </DndContext>
  )
}

export default BoardContent
